// Mixins

// Vendor Prefixes
@mixin prefix($property, $value, $vendors: webkit moz ms o, $default: true) {
  @if $vendors {
    @each $vendor in $vendors {
      #{"-" + $vendor + "-" + $property}: #{$value};
    }
  }
  @if $default {
    #{$property}: #{$value};
  }
}

// Gradient
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

// Single side border radius
@mixin border-top-radius($radius: $border-radius-default) {
border-top-right-radius: $radius;
border-top-left-radius: $radius;
}
@mixin border-right-radius($radius: $border-radius-default) {
border-top-right-radius: $radius;
border-bottom-right-radius: $radius;
}
@mixin border-bottom-radius($radius: $border-radius-default) {
border-bottom-right-radius: $radius;
border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius: $border-radius-default) {
border-top-left-radius: $radius;
border-bottom-left-radius: $radius;
}


// Emboss effect
@mixin box-emboss($opacity: 0.5, $opacity2: 0.5){
@if $browser-prefixes {
  @include juice-prefixer(box-shadow, "rgba(white,#{$opacity}) 0 1px 0, inset rgba(black,#{$opacity2}) 0 1px 0", webkit spec);
}
@else {
  box-shadow: rgba(white,$opacity) 0 1px 0, inset rgba(black,$opacity2) 0 1px 0;
}
}

// Letterpress effect
@mixin letterpress($opacity: 0.5){
text-shadow: rgba(white,$opacity) 0 1px 0;
}

// Placeholder text
@mixin placeholder-color($color: $placeholder-color-default) {
@if $browser-prefixes {
  &::-webkit-input-placeholder {
    color: $color;
  }
  &::-moz-placeholder {
    color: $color;
  }
  &::-ms-input-placeholder {
    color: $color;
  }
  &::placeholder {
    color: $color;
  }
}
@else {
  &::placeholder {
    color: $color;
  }
}
}

// Sizing
@mixin size($width, $height: $width) {
width: $width;
height: $height;
}

// Normal & hover state
@mixin hoverer($property, $normal, $hovered) {
#{$property}: $normal;
&:hover {
  #{$property}: $hovered;
}
}

// Helper Mixins


// Hide text
@mixin hide-text {
font: 0/0 a;
color: transparent;
text-shadow: none;
}

// Center an element vertically and horizontally
@mixin centerer {
@include absolute(50%,null,null,50%);
@if $browser-prefixes {
  @include juice-prefixer(transform, translate(-50%,-50%), webkit moz ms o spec);
}
@else {
  transform: translate(-50%,-50%);
}
}

// Center an element vertically
@mixin vert-centerer {
@include relative(50%);
@if $browser-prefixes {
  @include juice-prefixer(transform, translateY(-50%), webkit moz ms o spec);
}
@else {
  transform: translateY(-50%);
}
}

// Cover everything
@mixin coverer {
@include absolute(0, null, null, 0);
@include size(100%);
}

// Center a block level element
@mixin center-block {
display: block;
margin-left: auto;
margin-right: auto;
}


// Functions

// Mix white with another color
@function tint($color, $percent: $mix-percent-default){
@return mix(white, $color, $percent);
}

// Mix black with another color
@function shade($color, $percent: $mix-percent-default){
@return mix(black, $color, $percent);
}

// Create a random color
@function random-color($min: 0, $max: 255, $alpha: 1) {
@if $min < 0 {
  $min: -1;
} @else {
  $min: $min - 1;
}
@if $max > 255 {
  $max: 256;
} @else {
  $max: $max + 1;
}
$red: random($max) + $min;
$green: random($max) + $min;
$blue: random($max) + $min;
@return rgba($red, $green, $blue, $alpha);
}
